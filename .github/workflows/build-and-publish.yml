name: Build and Publish Cross-Platform

on:
  push:
    branches:
      - main
  workflow_dispatch: {} # Allows manual triggering of the workflow

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }} # Run jobs on different operating systems
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest] # Build for Windows and Ubuntu (Linux)
        include:
          - os: windows-latest
            rid: win-x64
            publish_dir: publish/win-x64
          - os: ubuntu-latest
            rid: linux-x64
            publish_dir: publish/linux-x64
    outputs:
      app_version: ${{ steps.generate_version.outputs.generated_version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Generate Version Number
        id: generate_version
        shell: bash
        run: |
          VERSION_NUMBER="${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ github.run_number }}"
          echo "Generated version: $VERSION_NUMBER"
          echo "generated_version=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Build and Publish for ${{ matrix.rid }}
        run: dotnet publish ./SelectSight.csproj --configuration Release --no-restore --runtime ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -p:DebugType=None -o ./publish/${{ matrix.rid }} -p:Version=${{ steps.generate_version.outputs.generated_version }}


      - name: Archive published output (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          $ArchiveName = "SelectSight-Windows-x64-${{ steps.generate_version.outputs.generated_version }}.zip"
          Compress-Archive -Path ${{ matrix.publish_dir }}/* -DestinationPath $ArchiveName
          echo "archive_name=$ArchiveName" >> $env:GITHUB_ENV

      - name: Archive published output (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          ARCHIVE_NAME="SelectSight-Linux-x64-${{ steps.generate_version.outputs.generated_version }}.tar.gz"
          tar -czvf "$ARCHIVE_NAME" -C ${{ matrix.publish_dir }} .
          echo "archive_name=$ARCHIVE_NAME" >> "$GITHUB_ENV"

      - name: Upload Archived Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_name }}
          path: ./${{ env.archive_name }}
          retention-days: 1

  
  release:
    name: Create Release and Upload Assets
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_assets

      - name: Create Release
        uses: softprops/action-gh-release@v2 # Action to create a GitHub Release
        with:
          tag_name: v${{ needs.build.outputs.app_version }}
          name: Release v${{ needs.build.outputs.app_version }}
          body: |
            Automated build for SelectSight
            Version: ${{ needs.build.outputs.app_version }}
          draft: true
          files: |
            ./release_assets/SelectSight-Windows-x64-${{ needs.build.outputs.app_version }}.zip/SelectSight-Windows-x64-${{ needs.build.outputs.app_version }}.zip
            ./release_assets/SelectSight-Linux-x64-${{ needs.build.outputs.app_version }}.tar.gz/SelectSight-Linux-x64-${{ needs.build.outputs.app_version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}